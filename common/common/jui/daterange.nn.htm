<script>
    function date_parse(string) {
		var tp = string.split(' ');
		var h = 0, m = 0;
		if(tp[1]){
			var x = tp[1].split(':');
			h = x[0];
			m = x[0];
		}
        var parts = string.split('.');
        return new Date(parseInt(parts[2]), parseInt(parts[1])-1, parseInt(parts[0]), h, m);
    }
emps_scripts.push(function() {
	var dates = jQuery( "#{{$from}}, #{{$to}}" ).date{{$istime}}picker({
		defaultDate: "now",
		changeMonth: false,
		numberOfMonths: 1,
		showMillisec: false,
		showMicrosec: false,
		showTimezone: false,
		timeInput: true,
		onClose: function(dateText, inst) {
			if(this.id=="{{$from}}"){
				var endDateTextBox = jQuery('#{{$to}}');
				if (endDateTextBox.val() != '') {
					/*var testStartDate = new Date(dateText);
					var testEndDate = new Date(endDateTextBox.val());*/
                    var testStartDate = date_parse(dateText),
                        testEndDate = date_parse(endDateTextBox.val());
					if (testStartDate > testEndDate)
						endDateTextBox.val(dateText);
				}
				else {
					endDateTextBox.val(dateText);
				}
			}else if(this.id=="{{$to}}"){
				var startDateTextBox = jQuery('#{{$from}}');
				if (startDateTextBox.val() != '') {
					/*var testStartDate = new Date(startDateTextBox.val()),
                        testEndDate = new Date(dateText);*/
                    var testStartDate = date_parse(startDateTextBox.val()),
                            testEndDate = date_parse(dateText);
					if (testStartDate > testEndDate)
						startDateTextBox.val(dateText);
				}
				else {
					startDateTextBox.val(dateText);
				}				
			}
		},		
		onSelect: function( selectedDate ) {
{{if $istime == 'time'}}			
			var option = this.id == "{{$from}}" ? "minDate" : "maxDate",			
				instance = jQuery( this ).data( "datepicker" ),

				this_picker = jQuery(this);
			var
				this_date = this_picker.datetimepicker('getDate'),
				this_time = new Date(this_date.getTime());
			
			var other_picker = dates.not( this );
			
			var other_date = other_picker.datetimepicker('getDate');
			
			other_picker.datetimepicker( "option", option, this_date );
		
{{else}}
			var option = this.id == "{{$from}}" ? "minDate" : "maxDate",			
				instance = jQuery( this ).data( "datepicker" ),
				date = jQuery.datepicker.parseDate(
					instance.settings.dateFormat ||
					jQuery.datepicker._defaults.dateFormat,
					selectedDate, instance.settings );
			dates.not( this ).date{{$istime}}picker( "option", option, date );
	
{{/if}}			
			if(typeof window.on_date_change == 'function'){
				on_date_change(this);
			}
		}
	});
});
</script>
